head	1.2;
access;
symbols;
locks
	beebe:1.2; strict;
comment	@ * @;


1.2
date	2004.10.31.00.11.04;	author beebe;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.30.21.11.14;	author beebe;	state Exp;
branches;
next	;


desc
@Original version.
@


1.2
log
@Major update for version 1.3.64x to support 64-bit architectures.
@
text
@/**************************************************************************
 *
 * bitio_random.c -- Functions for bitio to a file (random access)
 * Copyright (C) 1994  Neil Sharman
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * $Id: bitio_random.c,v 1.1 2004/10/30 21:11:14 beebe Exp beebe $
 *
 **************************************************************************/

/*
   $Log: bitio_random.c,v $
   Revision 1.1  2004/10/30 21:11:14  beebe
   Initial revision

   * Revision 1.1  1994/08/22  00:24:40  tes
   * Initial placement under CVS.
   *
 */

static char *RCSID = "$Id: bitio_random.c,v 1.1 2004/10/30 21:11:14 beebe Exp beebe $";



#include "sysfuncs.h"
#include "memlib.h"

#include "bitio_m_random.h"
#include "bitio_m.h"


void 
BIO_Random_Start (FILE * f, MG_u_long_t len,
		  random_bitio_state * bs)
{
  ENCODE_START (f, len)
    ENCODE_PAUSE (*bs)
}

void 
BIO_Random_Done (random_bitio_state * bs)
{
  ENCODE_CONTINUE (*bs)
    ENCODE_DONE
}

void 
BIO_Random_Encode_Bit (int bit, random_bitio_state * bs)
{
  ENCODE_CONTINUE (*bs)
    ENCODE_BIT (bit);
  ENCODE_PAUSE (*bs)
}

int 
BIO_Random_Decode_Bit (random_bitio_state * bs)
{
  register int val;
  DECODE_CONTINUE (*bs)
    val = DECODE_BIT;
  DECODE_PAUSE (*bs)
    return (val);
}


void 
BIO_Random_Unary_Encode (MG_u_long_t val, random_bitio_state * bs,
			 MG_u_long_t *bits)
{
  ENCODE_CONTINUE (*bs)
    if (bits)
    UNARY_ENCODE_L (val, *bits);
  else
    UNARY_ENCODE (val);
  ENCODE_PAUSE (*bs)
}


MG_u_long_t 
BIO_Random_Unary_Decode (random_bitio_state * bs,
			 MG_u_long_t *bits)
{
  register MG_u_long_t val;
  DECODE_CONTINUE (*bs)
    if (bits)
    UNARY_DECODE_L (val, *bits);
  else
    UNARY_DECODE (val);
  DECODE_PAUSE (*bs)
    return (val);
}







void 
BIO_Random_Binary_Encode (MG_u_long_t val, MG_u_long_t b,
			  random_bitio_state * bs, MG_u_long_t *bits)
{
  ENCODE_CONTINUE (*bs)
    if (bits)
    BINARY_ENCODE_L (val, b, *bits);
  else
    BINARY_ENCODE (val, b);
  ENCODE_PAUSE (*bs)
}


MG_u_long_t 
BIO_Random_Binary_Decode (MG_u_long_t b,
			  random_bitio_state * bs,
			  MG_u_long_t *bits)
{
  register MG_u_long_t val;
  DECODE_CONTINUE (*bs)
    if (bits)
    BINARY_DECODE_L (val, b, *bits);
  else
    BINARY_DECODE (val, b);
  DECODE_PAUSE (*bs)
    return (val);
}







void 
BIO_Random_Gamma_Encode (MG_u_long_t val, random_bitio_state * bs,
			 MG_u_long_t *bits)
{
  ENCODE_CONTINUE (*bs)
    if (bits)
    GAMMA_ENCODE_L (val, *bits);
  else
    GAMMA_ENCODE (val);
  ENCODE_PAUSE (*bs)
}


MG_u_long_t 
BIO_Random_Gamma_Decode (random_bitio_state * bs,
			 MG_u_long_t *bits)
{
  register MG_u_long_t val;
  DECODE_CONTINUE (*bs)
    if (bits)
    GAMMA_DECODE_L (val, *bits);
  else
    GAMMA_DECODE (val);
  DECODE_PAUSE (*bs)
    return (val);
}




void 
BIO_Random_Delta_Encode (MG_u_long_t val, random_bitio_state * bs,
			 MG_u_long_t *bits)
{
  ENCODE_CONTINUE (*bs)
    if (bits)
    DELTA_ENCODE_L (val, *bits);
  else
    DELTA_ENCODE (val);
  ENCODE_PAUSE (*bs)
}


MG_u_long_t 
BIO_Random_Delta_Decode (random_bitio_state * bs,
			 MG_u_long_t *bits)
{
  register MG_u_long_t val;
  DECODE_CONTINUE (*bs)
    if (bits)
    DELTA_DECODE_L (val, *bits);
  else
    DELTA_DECODE (val);
  DECODE_PAUSE (*bs)
    return (val);
}

void 
BIO_Random_Elias_Encode (MG_u_long_t val, MG_u_long_t b, double s,
			 random_bitio_state * bs, MG_u_long_t *bits)
{
  ENCODE_CONTINUE (*bs)
    if (bits)
    ELIAS_ENCODE_L (val, b, s, *bits);
  else
    ELIAS_ENCODE (val, b, s);
  ENCODE_PAUSE (*bs)
}


MG_u_long_t 
BIO_Random_Elias_Decode (MG_u_long_t b, double s,
			 random_bitio_state * bs,
			 MG_u_long_t *bits)
{
  register MG_u_long_t val;
  DECODE_CONTINUE (*bs)
    if (bits)
    ELIAS_DECODE_L (val, b, s, *bits);
  else
    ELIAS_DECODE (val, b, s);
  DECODE_PAUSE (*bs)
    return (val);
}

void 
BIO_Random_Bblock_Encode (MG_u_long_t val, MG_u_long_t b,
			  random_bitio_state * bs, MG_u_long_t *bits)
{
  ENCODE_CONTINUE (*bs)
    if (bits)
    BBLOCK_ENCODE_L (val, b, *bits);
  else
    BBLOCK_ENCODE (val, b);
  ENCODE_PAUSE (*bs)
}


MG_u_long_t 
BIO_Random_Bblock_Decode (MG_u_long_t b,
			  random_bitio_state * bs,
			  MG_u_long_t *bits)
{
  register MG_u_long_t val;
  DECODE_CONTINUE (*bs)
    if (bits)
    BBLOCK_DECODE_L (val, b, *bits);
  else
    BBLOCK_DECODE (val, b);
  DECODE_PAUSE (*bs)
    return (val);
}

void 
BIO_Random_Seek (MG_u_long_t pos, random_bitio_state * bs)
{
  ENCODE_CONTINUE (*bs)
    ENCODE_SEEK (pos);
  ENCODE_PAUSE (*bs)
}
void 
BIO_Random_Flush (random_bitio_state * bs)
{
  ENCODE_CONTINUE (*bs)
    ENCODE_FLUSH;
  ENCODE_PAUSE (*bs)
}

MG_u_long_t 
BIO_Random_Tell (random_bitio_state * bs)
{
  register MG_u_long_t t;
  ENCODE_CONTINUE (*bs)
    t = ENCODE_TELL;
  ENCODE_PAUSE (*bs)
    return (t);
}
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: bitio_random.c,v 1.1 1994/08/22 00:24:40 tes Exp $
d26 3
d34 1
a34 1
static char *RCSID = "$Id: bitio_random.c,v 1.1 1994/08/22 00:24:40 tes Exp $";
d46 1
a46 1
BIO_Random_Start (FILE * f, unsigned long len,
d80 2
a81 2
BIO_Random_Unary_Encode (unsigned long val, random_bitio_state * bs,
			 unsigned long *bits)
d92 1
a92 1
unsigned long 
d94 1
a94 1
			 unsigned long *bits)
d96 1
a96 1
  register unsigned long val;
d113 2
a114 2
BIO_Random_Binary_Encode (unsigned long val, unsigned long b,
			  random_bitio_state * bs, unsigned long *bits)
d125 2
a126 2
unsigned long 
BIO_Random_Binary_Decode (unsigned long b,
d128 1
a128 1
			  unsigned long *bits)
d130 1
a130 1
  register unsigned long val;
d147 2
a148 2
BIO_Random_Gamma_Encode (unsigned long val, random_bitio_state * bs,
			 unsigned long *bits)
d159 1
a159 1
unsigned long 
d161 1
a161 1
			 unsigned long *bits)
d163 1
a163 1
  register unsigned long val;
d177 2
a178 2
BIO_Random_Delta_Encode (unsigned long val, random_bitio_state * bs,
			 unsigned long *bits)
d189 1
a189 1
unsigned long 
d191 1
a191 1
			 unsigned long *bits)
d193 1
a193 1
  register unsigned long val;
d204 2
a205 2
BIO_Random_Elias_Encode (unsigned long val, unsigned long b, double s,
			 random_bitio_state * bs, unsigned long *bits)
d216 2
a217 2
unsigned long 
BIO_Random_Elias_Decode (unsigned long b, double s,
d219 1
a219 1
			 unsigned long *bits)
d221 1
a221 1
  register unsigned long val;
d232 2
a233 2
BIO_Random_Bblock_Encode (unsigned long val, unsigned long b,
			  random_bitio_state * bs, unsigned long *bits)
d244 2
a245 2
unsigned long 
BIO_Random_Bblock_Decode (unsigned long b,
d247 1
a247 1
			  unsigned long *bits)
d249 1
a249 1
  register unsigned long val;
d260 1
a260 1
BIO_Random_Seek (unsigned long pos, random_bitio_state * bs)
d274 1
a274 1
unsigned long 
d277 1
a277 1
  register unsigned long t;
@
